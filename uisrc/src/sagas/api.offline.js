import {takeEvery,put,fork,call,select} from 'redux-saga/effects';
import {delay} from 'redux-saga';
import {
  getrealtimedata_request,
  getrealtimedata_result,

  querydata_request,
  querydata_result,

  serialport_request,
  serialport_result,

  verifydata_request,
  verifydata_result,

  verifydatasave_request,
  verifydatasave_result

} from '../actions';
import _ from 'lodash';
import {parsedata} from './parse.js';
import moment from 'moment';
//
// const remote = window.require('electron').remote;
// // alert(`react remote:${!!remote}`);
// const srvremote = remote.getGlobal('api');
// alert(`react api:${!!srvremote}`);
//监听标记事件
// const api_getrealtimedata_request = ()=>{
//   return new Promise(resolve => {
//     srvremote.getrealtimedata((result)=>{
//       resolve(result);
//     })
//   });
// }
let sampledata = parsedata(`5500008064809880c480f681238151817e81a881dc82048237825f828c82b582d\
e8306832d83538375839883bb83df8402842a84508474849984b784d084e985018519852c853f854\
e856285728586859885a885bc85cb85db85e885f785fc86038607860e860d860f86148615861a861\
8861a86198617861a86178616860685e985c885ab858f856d854b8525850184d584ac8488845e843\
9841083ea83be8397836a8344831482ed82c0829282698239820e81df81b48186815a812b810180d\
380a7807a804c801c00100041007400a200d601040135015f019301be01f10221024b027902a002d\
102f4031f03420367038803b003d503f7042404490471049204b604d004eb04ff05150529053a054\
d055f05720585059605a605b705c905da05e805f205fb060006030607060b060f061106150614061\
6061506170618061606190613060305e405c605a7058a05690545051c04f404c904a004770450042\
503fb03d203a9037f0355032802fc02cf02a3027a024c022301f301c1019201640138010a00df00b\
000880056002c000000008060808e80bc80f08120814c817981a681d48201822d825d828582b482d\
d8305832a834f8373839483bb83da84028424844e8471849984b784d384ed8501851985298540855\
1856585738586859785a785bb85cb85dc85ea85f785fe86028607860b86108611861486168617861\
68619861a8619861886188616860485e885c885ab858f856c854a852084fc84d284ab8484845b843\
5840c83e183b983928365833b831082e482b6828a82618235820881da81ac8182814f812280f780c\
b80a0807380458013ee0000882d88308830882e882e882f8830882e883187e7849c81e4808480008\
000801d8035802880268035802c8024802280218021801d801880198018800a80008001800580018\
00080008000800080008000800080008000800080000000000000010000000000000003000100000\
0000002000200000001000200050007000a00130023003400390032002e0034003d0046004a00490\
04600450047004d005000520053005400560059005d006100620066006d0075007f02ab067c07190\
73007350736073507360737073807380738073707380737073707380739073806d904730213010a0\
06d0042006f00a500b40093006f00600068007b00870086007d007500740078007b007d007c007a0\
0790079007a007a007a007a007800740071006f006a006600630061005d0055003e0014000000070\
02400290016000e0019002500200012000b0008000000000000000080178019801c801b801a801c8\
01e80208020801e801f802080228038804a8050805c807a80ab80f3818e82e085f287c4881c88298\
82c882d882d882e882f882d882d882f882e882e882f88318830882d882e880785468217809c80008\
00080128031802c802a8038803180258020801e801d801a801480178017800e80008000800180038\
00080008000800080008000800080008000000000000000000000000000000100010002000100010\
000000100020004000300050004000300050012002a003b003c0031002a0030003f0048004a00480\
04500450049004e005100520053005500570059005d006000640068006f0078008d03b906b1071e0\
7310735073707370735`);

//const sampledata = parsedata('550000802B803980498056806580768082809480A380B180BE80CD80DA80E980F78105810F811C812A81358143814F815C8169817781838190819981A381AD81B081B581BB81C381CB81D181D581D881E081E681EB81ED81F281F481F781F881FA81FC81FC81FD81FB81FE81FF8200820081FF820081FE820081FE81FA81F181E581DB81D281CA81BE81B281A88199818C81818177816A815C814F8141812F81268118810B80FC80F080DF80CE80C180B380A4809480828072805F80508042803680258015800800010010001F002D003C004E005D006C007B008C009900AC00B800C700D500E100EF00FE010A011801250130013E014B0159016601780182018C019501A001AB01B101B401B801C001C701CE01D301D901DE01E201E501EF01EF01F301F401F401F601F901FA01F701FC01FB01FC01FB020001FF01FE01FE01FC01FC01F501ED01E301D901D001C501B801AB01A2019501860179016D0161015201450138012A011C010F010000F400E600D400C400B600A80096008600760066005400440037002800180009000000008000802B803A80478055806780768086809280A280AF80C080D080DD80EB80F88103810F811F812B813781438150815E816B817B81868190819A81A381AC81B281B881BA81C581CA81D081D481DC81E181E581EC81ED81F181F581F781F881FA81FB81FA81FD81FC820081FF8200820081FF82008200820181FD81F981EE81E281DB81D281C581BD81B081A38198818A8180817381678157814A813E813081238118810880FA80E880DA80CC80BF80AF80A0808F807C806C805B804F803E80308020801180010000EE0000835D83AD83BB8394835C834783578346833A832883268329830182E382C082AF82AC829B8291828B82848289829482A882C782C282838216819F8174817F8123809F808B80B480A880848069804B803080258022801F8020802080168000800080008000800000210029002500190013001C0027002800210020002F00480060006D006B006600670071007D007F00E302C8037202A102D5030A02B702F3031A02F40310032A032E03480359036003680369038603B503CA03C803A0036C035D0369036D03570360038403BC03F3040C03F703DE03DE03B0038A037D037B037B035503290315030702FE02ED02D702D302D602D902E803070331033A02F30278020D01D501D1018500FC00C7011F015B012300CB00B800BC00A80088006D006A007600830084007E007700750075007A007C007C007B007900780078007B007900770073006C005D001B807D8152815A81F2821082388279827682798285829782B382BA82CC82CF82D482D282EC8313831C83338344833C833D835D83838391838E836C832D831A832E83238321833A837083B483BF83A2836A8354835C834A8342832B8334832582FD82E582C182BB82B1829B8294828B828D828A829582B082D282CA827C820C819A817C817E81138098808780A9809F807F80628048803080258022802080208021800B80008000800080008000001A0021001C0019001C0021002000200024002B00350048005D0068006B006A006C0073007B007F01340326035D029302E502F002BA030A031402F603110325033B035A0366036A036D036F038B03B203C603BF0398036F035E036C036F0000');

export function* apiflow(){//仅执行一次
  yield takeEvery(`${getrealtimedata_request}`, function*(action) {
    // const result = yield call(api_getrealtimedata_request);
    // const {payload} = result;
    // const {line1,line2} = sampledata;
    sampledata.createtimestring = moment().format("YYYY-MM-DD HH:mm:ss");
    sampledata.verifydataflag = 0;
    let verifydata = {...sampledata};
    sampledata.verifydata = {
      created_at:verifydata.created_at,
      rawdata_hex: verifydata.rawdata_hex,
      rawdata_55:verifydata.rawdata_55,
      rawdata_ee:verifydata.rawdata_ee,
      verifydataflag:verifydata.verifydataflag,
      createtimestring:verifydata.createtimestring,
    };
    yield put(getrealtimedata_result(sampledata));

  });

  yield takeEvery(`${querydata_request}`, function*(action) {
    const {payload:{options}} = action;
    console.log(`options:${JSON.stringify(options)}`);
    // const options = {page:1,limit:10};
    const {page:current,limit:pageSize} = options;

    let docs_total = [];
    for(let i = 0; i< 42; i++){
      sampledata.createtimestring = moment().format("YYYY-MM-DD HH:mm:ss");
      sampledata.verifydataflag = 0;
      let verifydata = {...sampledata};
      sampledata.verifydata = {
        created_at:verifydata.created_at,
        rawdata_hex: verifydata.rawdata_hex,
        rawdata_55:verifydata.rawdata_55,
        rawdata_ee:verifydata.rawdata_ee,
        verifydataflag:verifydata.verifydataflag,
        createtimestring:verifydata.createtimestring,
      };
      docs_total.push(sampledata);
    }
    let docs = _.sampleSize(docs_total,pageSize);
    const payload = {
      page:current,
      limit:pageSize,
      total:docs_total.length,
      pages:(docs_total.length/pageSize)+1,
      docs
    }
    yield put(querydata_result(payload));
  });

  yield takeEvery(`${serialport_request}`, function*(action) {
    try{
      const {payload:{open}} = action;
      yield put(serialport_result(open));
    }
    catch(e){
      console.log(e);
    }

  });
  yield takeEvery(`${verifydata_request}`, function*(action) {
    try{
      sampledata.createtimestring = moment().format("YYYY-MM-DD HH:mm:ss");
      sampledata.verifydataflag = action.payload.verifydataflag;
      // const result = yield call(api_call,'verifydata',action.payload);
      yield put(verifydata_result(sampledata));
    }
    catch(e){
      console.log(e);
    }

  });

  yield takeEvery(`${verifydatasave_request}`, function*(action) {
    try{
      //const result = yield call(api_call,'verifydatasave',action.payload);
      let list = [];
      for(let i=0;i<3;i++){
        sampledata.createtimestring = moment().format("YYYY-MM-DD HH:mm:ss");
        sampledata.verifydataflag = i;
        list.push(sampledata);
      }
      yield put(verifydatasave_result(list));
    }
    catch(e){
      console.log(e);
    }
  });

}
